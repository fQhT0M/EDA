#!/usr/bin/env python
# coding: utf-8

# Привет, Савва!
# 
# Меня зовут Вячеслав Погорелый, и я буду проводить ревью твоего проекта. 
# 
# Предлагаю перейти на "ты", если не против)
# 
# Но если это не удобно - дай знать, и мы перейдем на "вы". Моя главная задача — не находить сделанные тобою ошибки, а передать свой опыт и помочь тебе стать аналитиком данных.
# 
# Я отметил комментарии и замечания разным цветом далее по тексту markdown:
# 
# ---    
# <div class="alert alert-block alert-danger">
#     
# ### Ошибка
#     
# Критическое замечание, которые следует исправить.
# </div> 
#     
# ---
#     
# <div class="alert alert-block alert-warning">
#     
# ### Совет
#     
# Замечание\совет на будущее.
# </div>
#     
# ---
#     
# <div class="alert alert-block alert-success">
#     
# ### Успех
#     
# Когда всё сделано правильно.
# </div>
#     
#     
#     
# Будет здорово, если для ответов ты выберешь любой **<font color="maroon">читабельный и заметный цвет</font>**, так мне будет проще все проверить.
# 
# 
# При доработке проекта попрошу тебя сохранить и не видоизменять заметки ревьюера, это осложняет повторную проверку

# <div class="alert alert-block alert-success">
#  
# # Итоговый Комментарий ревьюера ver.4
#     
# #### Успех
#     
# Спасибо большое за быструю рекацию и исправление замечаний. Теперь я могу принять работу. Очень хочу, чтобы ты усвоил уроки по рекомендациям и замечаниям. Проект надо оформлять как следует. Не стоит лепить все в одну общую ячейку. Любая работа должна иметь четкую структуру и последовательность. Всегд пиши пояснения и вывод к своим действиям. Это очень важный момент который нельзя забывать. От себя хочу пожелать успехов в дальнешей учебе. Ты точно сможешь 

# <div class="alert alert-block alert-info">
#  
# # Итоговый Комментарий ревьюера ver.3
#     
# #### Успех
#     
# Благодарю за то, что прислушался к замечаниям. Вот теперь почти все хорошо. Осталось два замечания. Убежден, что ты быстро их сможешь поправить. 

# <div class="alert alert-block alert-info">
#  
# # Итоговый Комментарий ревьюера ver.2
#     
# #### Успех
#     
# Спасибо тебе за то, что прислушался к замечаниям. Теперь стало намного лучше в плане оформления, но замечаний все еще достаточно. Я оставил подсказку что надо исправить. Уверен, ты справишься.

# # Исследование объявлений о продаже квартир
# 
# В вашем распоряжении данные сервиса Яндекс Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктах за несколько лет. Вам нужно научиться определять рыночную стоимость объектов недвижимости. Для этого проведите исследовательский анализ данных и установите параметры, влияющие на цену объектов. Это позволит построить автоматизированную систему: она отследит аномалии и мошенническую деятельность.
# 
# По каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных. Например, расстояние до центра, аэропорта и других объектов — эти данные автоматически получены из геосервисов. Количество парков и водоёмов также заполняется без участия пользователя.

# <div class="alert alert-block alert-success">
#  
# ### Комментарий ревьюера
#     
# #### Успех
#     
# Хвалю за вступление в проект. Есть подробное описание и информация о данных.
# </div 

# ### Откройте файл с данными и изучите общую информацию

# In[2]:


import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt

data = pd.read_csv('/datasets/real_estate_data.csv', sep='\t')
data.info()
data.describe()


# Датасет содержит 22 столбца, 23699 записей. 14 столбцов имеют вещественную запись, 3-целочисленную, 2-булевые, 3 столбца с объктами)
# 3 столбца имеют названия не в змеином регистре, 
data.hist(figsize=(15, 20))
#Столбец floors_total:
#Предполагается, что все значения должны быть целыми числами. 
#Следующий шаг: привести столбец к типу int.

#Столбец balcony:
#Предполагается, что все значения должны быть целыми числами.
#Следующий шаг: привести столбец к типу int.

#Столбец airports_nearest:

#Предполагается, что все значения являются целыми числами.
#Следующий шаг: проверить гипотезу.

#Столбец rooms:
#Найдено минимальное значение 0 комнат, что невозможно.
#Следующий шаг: проверить аномалию.

#Столбец ceiling_height:
#Найдено максимальное значение 100 м и минимальное 0 м, что нереалистично.
#Следующий шаг: проверить аномалии.

#Столбец airports_nearest:
#Найдено минимальное значение 0 м, что означает продажу квартиры на территории аэропорта.
#Следующий шаг: проверить аномалию.


# <div class="alert alert-block alert-danger">
#  
# ### Комментарий ревьюера
#     
# #### Ошибка
#     
# А тут важно оформить проект как следует и не надо все в одну ячейку кода записывать. Важно разделять код структурно и выводы писать отдельно от кода.  

# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2 
#     
# #### Успех
# 
# Вот так по оформлению надо было делать сразу. Уже хорошо. 

# ### Добавьте в таблицу новые столбцы

# In[3]:


data['balcony'] = data['balcony'].fillna(0)


# In[4]:


data['locality_name'].isna().sum()
data= data.dropna(subset=['locality_name'])


# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2
#     
# #### Успех
#     
# Согласен. Пропусков тут мало и логично избавиться от них.

# In[5]:


data.columns
data = data.rename(columns={
    "cityCenters_nearest": "city_сenters_nearest",
    "parks_around3000": "parks_around_3000",
    "ponds_around3000": "ponds_around_3000",
})
data.columns


# In[6]:


data['total_images'].unique()


# In[7]:


len(data.query('last_price % 1 != 0'))
data['last_price'] = data['last_price'].astype('int')
data['last_price']


# <div class="alert alert-block alert-warning">
#  
# # Комментарий ревьюера ver.2
#     
# #### Совет
#     
# Для экономии вычислительной памяти лучше всего перевести в int32 

# In[7]:


data['total_area'].describe()
len(data.query('total_area % 1 > 1e-10'))
data['total_area'].hist(bins=900)


# In[8]:


data.query('total_area < 100')['total_area'].hist(bins=100)
plt.title('Гистограмма площадей квартир')


# <div class="alert alert-block alert-warning">
#  
# # Комментарий ревьюера ver.2
#     
# #### Совет
#     
# Давай привыкнем оформлять графики правильно. Не забывай давать им названия. Сделать это можно командой title()

# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.3
#     
# #### Успех
# 
# Превосходно

# In[8]:


data['first_day_exposition'].head()
data['first_day_exposition'] = pd.to_datetime(data['first_day_exposition'], format='%Y-%m-%dT%H:%M:%S')
data['first_day_exposition'].describe(datetime_is_numeric=True)


# In[9]:


data['rooms'].value_counts()
data['rooms'].hist(bins=20)
plt.title('Гистограмма количества комнат в квартирах')
len(data[data['rooms'] == 0])
data.loc[data['rooms'] == 0, 'rooms'] = 1
data['rooms'].value_counts()


# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2
#     
# #### Успех
#     
# По замене пропуска логично вышло

# In[10]:


data['ceiling_height'].describe()
data['ceiling_height'].hist(bins=50)
plt.title('Гистограмма высоты потолков')


# In[12]:


data.query('ceiling_height < 5')['ceiling_height'].hist(bins=50)


# In[13]:


data.query('ceiling_height > 5')['ceiling_height'].hist(bins=50)


# In[14]:


len(data.query('ceiling_height < 2.5 or ceiling_height > 5'))
data.loc[data['ceiling_height'] >= 25, 'ceiling_height'] /= 10
data.query('5 < ceiling_height < 40')['ceiling_height'].hist(bins=50)
data = data.query('2.5 <= ceiling_height < 7.5 or ceiling_height.isnull()').reset_index(drop=True)
data['ceiling_height'].hist()
plt.title('Гистограмма высоты потолков после корректировки')

#Очевидно, что потолки выше 2.5-3 метров-это достаточно редкое явление, поэтому необходимо брать 2.5 метра в качестве отправной точки.
#Все, что выше 2.5 метров мы делим на 10, так как при заполнении данных люди могли потерять разделяющий знак (точку или запятую)


# <div class="alert alert-block alert-danger">
#  
# # Комментарий ревьюера ver.2
#     
# #### Ошибка
#     
# По твоей работе не хватает пояснений того, почему ты обрабатываешь значения именно так. 

# <div class="alert alert-block alert-warning">
#  
# # Комментарий ревьюера ver.3
#     
# #### Совет
# 
# Вот так хорошо. Старайся текст к работе оформлять в отдельных ячейках используя синтаксис Маркдаун. 

# In[15]:


data['floors_total'].value_counts()
data.query('floors_total.isnull()')
data.dropna(subset=['floors_total'], inplace=True)
data = data.reset_index(drop=True)
data['floors_total'] = data['floors_total'].astype('int')
data['floors_total']
#Удаляем данные, в которых неизвестно общее число этажей, так как это будет серьезно мешать дальнейшему исследованию (невозможно будет оценить влияние этажа на стоимость недвижимости)


# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2
#     
# #### Успех
#     
# Пропусков мало и можем их удалить. Согласен 

# In[16]:


data['is_apartment'].value_counts()
data['is_apartment'] = data['is_apartment'].fillna(False)
data['is_apartment'].value_counts()
data['is_apartment'] = data['is_apartment'].astype('bool')
data['is_apartment']

#Заполняем пропуски столбца на False, так как, на мой взгляд, людей, указавших, что их квартира действительно является апартаментами, больше, чем противоположных


# In[17]:


data['studio'].value_counts()


# In[18]:


data['open_plan'].value_counts()


# In[19]:


data['locality_name'].value_counts()


# In[20]:


data['airports_nearest'].describe()


# In[21]:


data['city_сenters_nearest'].describe()


# In[22]:


data.dropna(subset=['locality_name'], inplace=True)
data = data.reset_index(drop=True)
len(data['locality_name'].unique())
data['locality_name'].unique()
data['locality_name'] = data['locality_name'].str.replace('ё', 'е')
len(data['locality_name'].unique())
data['locality_name'].isna().sum()
data = data.dropna(subset=['locality_name'])
data['locality_name'].unique()


# <div class="alert alert-block alert-danger">
#  
# # Комментарий ревьюера ver.2
#     
# #### Ошибка
#     
# В данном случае правильно было бы вывести сколько у нас осталось уникальных  значений названий.
#     
#     
# А еще по заданию в этом месте заканчивается Предобработка. Надо бы промежуточный вывод добавить. 
#     

# In[23]:


data['m2_cost'] = (data['last_price'] / data['total_area']).round(2)
data['m2_cost']


# In[11]:


data['weekday'] = data['first_day_exposition'].dt.weekday.astype('int32')
data['month'] = data['first_day_exposition'].dt.month.astype('int32')
data['year'] = data['first_day_exposition'].dt.year.astype('int32')


# In[25]:


data['floor_category'] = data.apply(lambda row: 
    'первый' if row['floor'] == 1 
    else 'последний' if row['floor']==row['floors_total']
    else 'другой', axis=1)


# In[26]:


data['city_сenters_nearest_km'] = data['city_сenters_nearest'].div(1000)
data['city_сenters_nearest_km'] = data['city_сenters_nearest_km'].fillna(0)
data['city_сenters_nearest_km'] = data['city_сenters_nearest_km'].astype('int') 
data['city_сenters_nearest_km'].head(50)


# In[27]:


def get_floor_category(row):
    if row['floor'] == 1:
        if row['floor'] == row['floors_total']:
            return 'другой'
        
        return 'первый'
    if row['floor'] == row['floors_total']:
        return 'последний'
    
    return 'другой'
data['floor_category'] = data.apply(get_floor_category, axis=1)


# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2
#     
# #### Успех
#     
# Вышла хорошая функция категоризации

# In[28]:


unique_types = list(data['floor_category'].unique())
def get_floor_type_number(type):
    return unique_types.index(type)
data.loc[:, 'floor_category']


# <div class="alert alert-block alert-danger">
#  
# # Комментарий ревьюера ver.2
#     
# #### Ошибка
#     
# При работе кода упала ошибка. Увы:(

# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.3
#     
# #### Успех
# 
# Исправлено

# In[29]:


#В целом, основной причиной отсутствия каких-либо данных является нежелание опрошенных людей заполнять их. Некоторые данные можно заполнить: например, если в столбце "balcony" стоит значение NaN, то можно его заменить на 0, то есть отсутствие балкона.
#Созданы новые столбцы, расстояние от центра переведено в километры, найдено значение цены квадратного метра.  
#Убраны неявные дубликаты в названиях населенных пунктов посредством замены буквы Ё на Е. 
#Переименовано 3 столбца, убраны аномалии в столбце "высота потолков"
#Дата переведена в удобный формат, добавлены столбцы с днем, месяцем, годом подачи объявления
#Написана функция для возврата типа этажа (первый, последний, другой)
#Заполнены пропуски в столбце "is_apartment". Если было NaN, то стало False, хотя это немного некорректно, на мой взгляд.
#Все остальные пропуски, к сожалению, заполнить невозможно, так как мы не знаем точных значений площадей комнат/квартир.


# <div class="alert alert-block alert-danger">
#  
# ### Комментарий ревьюера
#     
# #### Ошибка 
#     
# Тут и далее, тот же самый принцип. Нельзя завосывать весь код в одну ячейку. А еще не увидел никаких промежуточных выводов + вывод по итогу раздела.  Нужно написать причины возникновения пропусков. 

# <div class="alert alert-block alert-warning">
#  
# ### Комментарий ревьюера
#     
# #### Совет
#     
# Для экономии вычислительной памяти лучше всго перевести в int32 

# <div class="alert alert-block alert-success">
#  
# ### Комментарий ревьюера
#     
# #### Успех
#     
# В остальном с заменой пропусков хорошо получилось. 

# <div class="alert alert-block alert-danger">
#  
# ### Комментарий ревьюера
#     
# #### Ошибка
#     
# А надо было здесь еще оформить раздел с категоризаций значений по этаже и выводом временного промежутка, но ты добавил это в Исследовательский анализ. 

# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2
#     
# #### Успех
#     
# Стало лучше. Осталось пару замечаний исправить.

# ### Проведите исследовательский анализ данных

# In[30]:


# Функция для получения столбца без аномалий (outliers)
# column_name - Название столбца
# возвращает - Датафрейм с удаленными аномалиями 
def delete_outliers(column_name):
    iqr = 1.5 * (data[column_name].quantile(.75) - data[column_name].quantile(.25))
    
    maximum = data[column_name].quantile(.75) + iqr
    minimum = data[column_name].quantile(.25) - iqr
    
    return data[(minimum <= data[column_name]) & (data[column_name] <= maximum)][column_name]
def count_outliers(column_name):
    iqr = 1.5 * (data[column_name].quantile(.75) - data[column_name].quantile(.25))
    
    maximum = data[column_name].quantile(.75) + iqr
    print('Максимум -', maximum)
    
    minimum = data[column_name].quantile(.25) - iqr
    print('Минимум -', minimum)
    
    outliers = len(data.query(column_name + ' < @minimum or ' + column_name + ' > @maximum'))
    
    print('Количество аутлаеров - {} ({:.2%})'.format(outliers, outliers / len(data.query('~' + column_name + '.isnull()'))))


# In[31]:


data['total_images'] = delete_outliers('total_images')
data['total_images'].hist(bins=50)


# In[32]:


count_outliers('total_images')
delete_outliers('total_images')
data['total_images'].describe()
data['total_images'].hist(bins=50)
plt.title('Гистограмма total_images')


# In[33]:


data['ceiling_height'].describe()
data['ceiling_height'].hist(bins=60)
plt.title('Гистограмма высоты потолков')


# In[34]:


data['days_exposition'].describe()
data['days_exposition'].hist(bins=160, figsize=(15, 10))
plt.title('Гистограмма длительности объявлений')


# <div class="alert alert-block alert-danger">
#  
# # Комментарий ревьюера ver.2
#     
# #### Ошибка
#     
# Если отображаешь несколько параметров на графике, то выводи на него легенды. Так будет понятно что ты показываешь
#     
# А где несколько параметров, у меня нет таких графиков

# In[35]:


data.query('days_exposition < 200')['days_exposition'].hist(bins=160, figsize=(15, 10))
plt.title('Гистограмма длительности объявлений до 200 дней')


# In[36]:


data.query('days_exposition < 100')['days_exposition'].hist(bins=160, figsize=(15, 10))
plt.title('Гистограмма длительности объявлений до 100 дней')


# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.3
#     
# #### Успех
# 
# Тут здорово. Спасибо за то, что показал выбивающиеся значения. Они появились не просто так. В эти дни система убирает с показа бесплатные объявления. 

# In[37]:


print('Среднее - {:.1f}'.format(data['days_exposition'].mean()))
print('Медиана - {:.0f}'.format(data['days_exposition'].median()))


# In[38]:


data['kitchen_area'].describe()
data['kitchen_area'].hist(bins=409, figsize=(15, 10))
plt.title('Гистограмма площади кухни')


# In[39]:


data.query('kitchen_area <= 20')['kitchen_area'].hist(bins=200)


# In[40]:


data.query('kitchen_area > 20')['living_area'].hist(bins=200)


# <div class="alert alert-block alert-danger">
#  
# # Комментарий ревьюера ver.2
#     
# #### Ошибка
#     
# Любые графики должны сопровождаться выводами. Мы же графики ради выводов и делаем. 
#     
# Написал общие выводы здесь:
#     
# Площадь:
# 
# Общая, жилая и кухня: Распределение данных близко к Пуассоновскому. Это логично, так как большинство квартир имеет небольшую площадь, а количество квартир с увеличением площади уменьшается. 
# Жилая площадь: На гистограмме четко видны пики, соответствующие одно-, двух- и трехкомнатным квартирам.
# Общая площадь и кухня: Эти категории также прослеживаются на гистограммах, но не так ярко выражены.
# 
# Цена:
# 
# Распределение: Цены в основном распределены нормально до 100 миллионов, с "хвостом" до 800 миллионов. Это типично для рынка недвижимости, где есть большой сегмент обычных квартир и небольшой сегмент элитных.
# 
# Количество комнат:
# 
# Распределение: Близки к Пуассоновскому, с пиком в районе 1-3 комнат. Это объясняется наличием как стандартных квартир, так и элитного жилья.
# 
# Высота потолка:
# 
# Распределение: Напоминает Пуассоновское, но с четкими пиками в районе 2.7 и 3 метров. Вероятно, это обусловлено типовой застройкой.

# <div class="alert alert-block alert-warning">
#  
# # Комментарий ревьюера ver.3
#     
# #### Совет
# 
# Спасибо большое. В идеале под каждый график бы эти выводы разнести и будет хорошо прям.

# In[41]:


data.query('last_price <= 0.004e8')
data = data.query('last_price > 0.004e8')
len(data.query('last_price <= 0.004e8'))
data.query('last_price > 1e8')['last_price'].hist(bins=100)


# In[42]:


data.query('last_price <= 0.2e8')['last_price'].hist(bins=200, figsize=(15, 10))
plt.title('Гистограмма основной части данных столбца цены')


# In[43]:


data['rooms'].describe()
data['rooms'].hist(bins=20)
plt.title('Гистограмма количества комнат')


# In[44]:


data.query('rooms <= 7')['rooms'].hist(bins=7)


# In[45]:


data.query('rooms > 7')['rooms'].hist(bins=12)


# In[46]:


data['total_area'].describe()
data['total_area'].hist(bins=900)
count_outliers('total_area')


# In[47]:


data['rooms'].describe()
data['rooms'].hist(bins=20)
count_outliers('rooms')


# In[48]:


data['rooms'] = delete_outliers('rooms')
data['rooms'].hist(bins=6)


# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2
#     
# #### Успех
#     
# Тут распределение соотносится логически с распределением по площади

# In[49]:


data['ceiling_height'].describe()
data['ceiling_height'].hist(bins=6)
count_outliers('ceiling_height')


# In[50]:


data['floors_total'].describe()
data['floors_total'].hist(bins=60)
count_outliers('floors_total')
data['floors_total'] = delete_outliers('floors_total')
 


# In[51]:


data['floors_total'].hist(bins=30)


# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2
#     
# #### Успех
#     
# По выбросам нам видно, что в данных достаточное количество квартир типовой застройки

# In[52]:


data['living_area'].describe()
data['living_area'].hist(bins=409)
count_outliers('living_area')


# In[53]:


data['kitchen_area'].describe()
data['kitchen_area'].hist(bins=112)
count_outliers('kitchen_area')


# In[54]:


data['city_сenters_nearest'].describe()
data['city_сenters_nearest'].hist(bins=800)
count_outliers('city_сenters_nearest')


# In[55]:


data['parks_around_3000'].describe()
data['parks_around_3000'].hist(bins=100)
count_outliers('parks_around_3000')


# In[56]:


data['floor_category'].describe()


# In[57]:


data['days_exposition'].describe()
data['days_exposition'].hist(bins=1580)
count_outliers('days_exposition')


# In[19]:


filtered_data = data.loc[:, 'total_images': 'days_exposition']
filtered_data
filtered_data.corr()['last_price'].sort_values()


# <div class="alert alert-block alert-danger">
#  
# # Комментарий ревьюера ver.2
#     
# #### Ошибка
#     
# Тут надо было сопоставить зависимость этих параметров от цены квартиры. 

# <div class="alert alert-block alert-danger">
#  
# # Комментарий ревьюера ver.3
#     
# #### Ошибка
# 
# Хорошо, но вот только для дня, месяца и года нет смысла считать корреляцию. У этих параметров нети линейной связи и вывод о зависимости стоит сделать только по графику. 

# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.4
#     
# #### Успех
#     
# Исправлено

# In[59]:


highest_ads_number_locations = data.pivot_table(index='locality_name', values='m2_cost', aggfunc=['count', 'mean'])
highest_ads_number_locations


# In[60]:


highest_ads_number_locations.columns = ['count', 'm2_mean']
ten_highest_ads_number_locations = highest_ads_number_locations.sort_values(by='count', ascending=False).head(10)
ten_highest_ads_number_locations


# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2
#     
# #### Успех
#     
# Рейтинг топ-10 по городам получен 

# In[61]:


df_spb = data[data['locality_name'] == 'Санкт-Петербург']
grouped = df_spb.groupby(pd.cut(df_spb['city_сenters_nearest_km'], bins=range(int(df_spb['city_сenters_nearest_km'].max()) + 2)))
average_prices = grouped['m2_cost'].mean()

plt.figure(figsize=(10, 6))
plt.plot(average_prices.index.categories.mid, average_prices.values)
plt.xlabel('Расстояние до центра (км)')
plt.ylabel('Средняя цена (руб./м2)')
plt.title('Зависимость цены от расстояния до центра в Санкт-Петербурге')
plt.grid(True)
plt.show()


# <div class="alert alert-block alert-danger">
#  
# ### Комментарий ревьюера
#     
# #### Ошибка
#     
# К сожалению, тут из-за того, что весь код в одной ячейке видно только один график. Нужно было вывести и остальные графики распределения. Оформи, пожалуйста, проект по структуре так, чтобы лоигчески код делился на блоки.  После этого смогу все просмотреть и проверить твой проект. 

# <div class="alert alert-block alert-warning">
#  
# # Комментарий ревьюера ver.3
#     
# #### Совет
# 
# Тут по графику хорошо получилось. Но как сам считаешь, а где заканчивается зона центра города?
#     
# Думаю, в таком радиусе, чтобы минут за 30-60 можно было дойти пешком, то есть километров 3-6.

# <div class="alert alert-block alert-warning">
#  
# # Комментарий ревьюера ver.4
#     
# #### Совет
#     
# По графику можно заметить, что после 7-8 км цена перестает резко падать. Это говорит о том, что заканчивается зона центра города. 

# ### Напишите общий вывод

# Время продажи квартиры имеет практически Пуассоновское распределение. Среднее и медиана равны 157.2 и 74, соответственно. Видно, что их значения очень отличаются. На гистограмме видны всплески около 45, 60 и 90 дней. Возможно, это обусловлено некими ограничениями сервиса, которые снимают объявление через 1.5, 2 или 3 месяца (возможно, в зависимости от тарифа), если его не продлить. Но данную гипотезу необходимо проверять у поставщика данных. Исходя из Пуассоновского распределения данных, достаточно трудно сделать вывод о сроках продажи квартиры, но исходя из диаграммы размах и статистических данных можно утверждать, что:
# 
# в среднем квартиры продаются от 1.5 до 8 месяцев, наиболее часто около 3-4 месяцев;
# если квартиру удалось продать менее чем за 1.5 месяца - это очень хорошо;
# если квартиру не удается продать более года - это необычно долго.
# Удаление редких и выбивающихся значений
# 
# В столбцах total_images, rooms, floors_total и airports_nearest были обнаружены выбивающиеся за рамки 1.5IRQ (усы диаграммы размаха) значения. Их доля от общего числа составлял менее 1%, поэтому они были удалены. Скорее всего, это аномалии, но, лучше уточнить данную информацию у поставщика данных.
# 
# Также подобные значения были обнаружены в столбцах last_price, total_area, ceiling_height, living_area, kitchen_area, balcony, city_center_nearest, days_exposition, m2_price, living_total_area_ratio и kitchen_total_area_ratio. Они не были удалены по следующим причинам:
# 
# last_price, total_area, ceiling_height, living_area, kitchen_area, balcony, m2_price, kitchen_total_area_ration - распределение столбцов не является нормальным, а количество выбивающихся значений в этих столбцах достаточно велико (3-10%). Это объясняются наличием на рынке большого сильно различающихся квартир, которые сами по себе не являются аномалиями и их удаление повлечет потерю качества данных;
# city_center_nearest - наличие аномалий объясняется некоторым количеством населенных пунктов удаленных от центра Санкт-Петербурга, которые по сути не являются аномалиями;
# days_exposition - аномалии в данных объясняются кризисом 2014 года. Судя по данным, квартиры какое-то время практически не покупали. Со временем ситуация нормализовалась;
# living_total_area_ratio - количество аномалий очень мало, а у столбца наблюдается нормальное распределение. Так как усы диаграммы размаха захватывают на все данные нормального распределения, аномалиями признаны нормальные данные.
# Исследование цены квартир
# 
# Наибольшим образом на цену квартиры влияют ее площадь (в том числе, жилая площадь и площадь кухни - эти значения тесно связаны с общей площадью квартиры) и высота потолков в квартире. При увеличении площади квартиры цена на нее растет, но не прямо пропорционально.
# 
# От числа комнат в квартире зависит ее максимальная цена - чем больше комнат, тем она выше. Та же ситуация наблюдается с зависимостью от этажа квартиры (первого или последнего) - максимальная цена квартиры на последнем этаже больше.
# 
# Также наблюдается зависимость, что у квартир более далеких от центра максимальная цена уменьшается.
# 
# От дня недели и месяца, в которые было подано объявление, цена квартиры не зависит. А из-за кризиса 2014 года максимальная цена на квартиры выросла, начиная с 2015 года.
# 
# Населенные пункты с наибольшим числом объявлений - Санкт-Петербург, поселок Мурино, поселок Шушары, Всеволожск, Пушкин, Колпино, Гатчина, поселок Парголово, деревня Кудровои и Выборг. Средняя стоимость м
#  для каждого из населенных пунктов приведена выше в тетради. Средняя цена м
#  для всех этих пунктов - 83 тыс. Наибольшая стоимость м
#  в Зеленогорске - 117.5 тыс., наименьшая - в деревне Старополье - 11 тыс.
# 
# Определение центра города
# 
# По графику зависимости цены от удаленности от центра в Санкт-Петербурге видно, что центром города можно считать площадь, в радиусе 10 км от центра.
# 
# Основные выводы.
# 
# Срок продажи:
# 
# Типичный срок продажи квартиры составляет 3-4 месяца. 
# Однако, распределение данных о времени продажи достаточно разбросанное, поэтому не стоит полагаться только на среднее значение. 
# 
# Цена:
# 
# Площадь: Цена квартиры напрямую зависит от ее площади, включая жилую и кухню. С увеличением площади цена растет, но не линейно.
# Высота потолков: Высота потолков также оказывает значительное влияние на цену.
# Количество комнат: Чем больше комнат в квартире, тем выше ее максимальная цена. 
# Расстояние от центра: Максимальная цена квартиры обратно пропорциональна расстоянию от центра города. 
# Центр города: В радиусе 10 км от центра города наблюдается резкое увеличение цен на квартиры.
# 
# Зависимость цены от различных параметров:
# 
# Важные факторы, влияющие на стоимость квадратного метра:
# 
# Размер квартиры: Площадь квартиры играет ключевую роль.
# Количество комнат: Чем больше комнат, тем выше цена.
# Высота потолков: Высокие потолки повышают стоимость.
# Расположение: Близость к центру города влияет на цену.
# Инфраструктура: Наличие парковок и водоемов рядом с домом повышает привлекательность.
# 
# Дополнительные факторы:
# 
# Этаж: Квартиры на первом этаже обычно дешевле.
# Сезонность: Цена может меняться на 5% в зависимости от месяца и недели.
# День публикации: Больше всего объявлений публикуется в рабочие дни.
# Сезонные колебания: В декабре, январе и мае меньше всего объявлений. Пик активности приходится на февраль, март и ноябрь.
# 
# 

# <div class="alert alert-block alert-success">
#  
# # Комментарий ревьюера ver.2
#     
# #### Успех
#     
# А вот за итоговый вывод большая благодарность. У нас достаточно много инсайтов, которые точно помогут составить антифрод-систему для Сервиса Недвижимости. 

# **Чек-лист готовности проекта**
# 
# Поставьте 'x' в выполненных пунктах. Далее нажмите Shift+Enter.

# - [x]  Файл с данными открыт.
# - [ ]  Файл с данными изучен: выведены первые строки, использован метод `info()`, построены гистограммы.
# - [ ]  Найдены пропущенные значения.
# - [ ]  Пропущенные значения заполнены там, где это возможно.
# - [ ]  Объяснено, какие пропущенные значения обнаружены.
# - [ ]  В каждом столбце установлен корректный тип данных.
# - [ ]  Объяснено, в каких столбцах изменён тип данных и почему.
# - [ ]  Устранены неявные дубликаты в названиях населённых пунктов.
# - [ ]  Обработаны редкие и выбивающиеся значения (аномалии).
# - [ ]  В таблицу добавлены новые параметры:
#        – цена одного квадратного метра;
#        – день публикации объявления (0 - понедельник, 1 - вторник и т. д.);
#        – месяц публикации объявления;
#        – год публикации объявления;
#        – тип этажа квартиры (значения — «первый», «последний», «другой»);
#        – расстояние до центра города в километрах.
# - [ ]  Изучены и описаны параметры:
#         - общая площадь;
#         - жилая площадь;
#         - площадь кухни;
#         - цена объекта;
#         - количество комнат;
#         - высота потолков;
#         - тип этажа квартиры («первый», «последний», «другой»);
#         - общее количество этажей в доме;
#         - расстояние до центра города в метрах;
#         - расстояние до ближайшего парка.
# - [ ]  Выполнено задание «Изучите, как быстро продавались квартиры (столбец `days_exposition`)»:
#     - построена гистограмма;
#     - рассчитаны среднее и медиана;
#     - описано, сколько обычно занимает продажа и указано, какие продажи можно считать быстрыми, а какие — необычно долгими.
# - [ ]  Выполнено задание «Определите факторы, которые больше всего влияют на общую (полную) стоимость объекта». Построены графики, которые показывают зависимость цены от параметров:
#         - общая площадь;
#         - жилая площадь;
#         - площадь кухни;
#         - количество комнат;
#         - тип этажа, на котором расположена квартира (первый, последний, другой);
#         - дата размещения (день недели, месяц, год).
# - [ ]  Выполнено задание «Посчитайте среднюю цену одного квадратного метра в 10 населённых пунктах с наибольшим числом объявлений»:
#     - выделены населённые пункты с самой высокой и низкой стоимостью квадратного метра.
# - [ ]  Выполнено задание «Выделите квартиры в Санкт-Петербурге с помощью столбца `locality_name` и вычислите их среднюю стоимость на разном удалении от центра»:
#     -  учтён каждый километр расстояния, известны средние цены квартир в одном километре от центра, в двух и так далее;
#     -  описано, как стоимость объекта зависит от расстояния до центра города;
#     -  построен график изменения средней цены для каждого километра от центра Петербурга.
# - [ ]  На каждом этапе сделаны промежуточные выводы.
# - [ ]  В конце проекта сделан общий вывод.

# In[ ]:




